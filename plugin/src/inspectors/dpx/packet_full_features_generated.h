// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKETFULLFEATURES_MACHINELEARNING_H_
#define FLATBUFFERS_GENERATED_PACKETFULLFEATURES_MACHINELEARNING_H_

#include "flatbuffers/flatbuffers.h"

namespace machinelearning {

struct Packet;
struct PacketBuilder;

struct Packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DURATION = 4,
    VT_PROTOCOL_TYPE = 6,
    VT_SERVICE = 8,
    VT_FLAG = 10,
    VT_SRC_BYTES = 12,
    VT_DST_BYTES = 14,
    VT_LAND = 16,
    VT_WRONG_FRAGMENT = 18,
    VT_URGENT = 20,
    VT_HOT = 22,
    VT_NUM_FAILED_LOGINS = 24,
    VT_LOGGED_IN = 26,
    VT_NUM_COMPROMISED = 28,
    VT_ROOT_SHELL = 30,
    VT_SU_ATTEMPTED = 32,
    VT_NUM_ROOT = 34,
    VT_NUM_FILE_CREATIONS = 36,
    VT_NUM_SHELLS = 38,
    VT_NUM_ACCESS_FILES = 40,
    VT_NUM_OUTBOUND_CMDS = 42,
    VT_IS_HOST_LOGIN = 44,
    VT_IS_GUEST_LOGIN = 46,
    VT_COUNT = 48,
    VT_SRV_COUNT = 50,
    VT_SERROR_RATE = 52,
    VT_SRV_SERROR_RATE = 54,
    VT_RERROR_RATE = 56,
    VT_SRV_RERROR_RATE = 58,
    VT_SAME_SRV_RATE = 60,
    VT_DIFF_SRV_RATE = 62,
    VT_SRV_DIFF_HOST_RATE = 64,
    VT_DST_HOST_COUNT = 66,
    VT_DST_HOST_SRV_COUNT = 68,
    VT_DST_HOST_SAME_SRV_RATE = 70,
    VT_DST_HOST_DIFF_SRV_RATE = 72,
    VT_DST_HOST_SAME_SRC_PORT_RATE = 74,
    VT_DST_HOST_SRV_DIFF_HOST_RATE = 76,
    VT_DST_HOST_SERROR_RATE = 78,
    VT_DST_HOST_SRV_SERROR_RATE = 80,
    VT_DST_HOST_RERROR_RATE = 82,
    VT_DST_HOST_SRV_RERROR_RATE = 84
  };
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, 0);
  }
  const flatbuffers::String *protocol_type() const {
    return GetPointer<const flatbuffers::String *>(VT_PROTOCOL_TYPE);
  }
  const flatbuffers::String *service() const {
    return GetPointer<const flatbuffers::String *>(VT_SERVICE);
  }
  const flatbuffers::String *flag() const {
    return GetPointer<const flatbuffers::String *>(VT_FLAG);
  }
  int32_t src_bytes() const {
    return GetField<int32_t>(VT_SRC_BYTES, 0);
  }
  int32_t dst_bytes() const {
    return GetField<int32_t>(VT_DST_BYTES, 0);
  }
  int32_t land() const {
    return GetField<int32_t>(VT_LAND, 0);
  }
  int32_t wrong_fragment() const {
    return GetField<int32_t>(VT_WRONG_FRAGMENT, 0);
  }
  int32_t urgent() const {
    return GetField<int32_t>(VT_URGENT, 0);
  }
  int32_t hot() const {
    return GetField<int32_t>(VT_HOT, 0);
  }
  int32_t num_failed_logins() const {
    return GetField<int32_t>(VT_NUM_FAILED_LOGINS, 0);
  }
  int32_t logged_in() const {
    return GetField<int32_t>(VT_LOGGED_IN, 0);
  }
  int32_t num_compromised() const {
    return GetField<int32_t>(VT_NUM_COMPROMISED, 0);
  }
  int32_t root_shell() const {
    return GetField<int32_t>(VT_ROOT_SHELL, 0);
  }
  int32_t su_attempted() const {
    return GetField<int32_t>(VT_SU_ATTEMPTED, 0);
  }
  int32_t num_root() const {
    return GetField<int32_t>(VT_NUM_ROOT, 0);
  }
  int32_t num_file_creations() const {
    return GetField<int32_t>(VT_NUM_FILE_CREATIONS, 0);
  }
  int32_t num_shells() const {
    return GetField<int32_t>(VT_NUM_SHELLS, 0);
  }
  int32_t num_access_files() const {
    return GetField<int32_t>(VT_NUM_ACCESS_FILES, 0);
  }
  int32_t num_outbound_cmds() const {
    return GetField<int32_t>(VT_NUM_OUTBOUND_CMDS, 0);
  }
  int32_t is_host_login() const {
    return GetField<int32_t>(VT_IS_HOST_LOGIN, 0);
  }
  int32_t is_guest_login() const {
    return GetField<int32_t>(VT_IS_GUEST_LOGIN, 0);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  int32_t srv_count() const {
    return GetField<int32_t>(VT_SRV_COUNT, 0);
  }
  float serror_rate() const {
    return GetField<float>(VT_SERROR_RATE, 0.0f);
  }
  float srv_serror_rate() const {
    return GetField<float>(VT_SRV_SERROR_RATE, 0.0f);
  }
  float rerror_rate() const {
    return GetField<float>(VT_RERROR_RATE, 0.0f);
  }
  float srv_rerror_rate() const {
    return GetField<float>(VT_SRV_RERROR_RATE, 0.0f);
  }
  float same_srv_rate() const {
    return GetField<float>(VT_SAME_SRV_RATE, 0.0f);
  }
  float diff_srv_rate() const {
    return GetField<float>(VT_DIFF_SRV_RATE, 0.0f);
  }
  float srv_diff_host_rate() const {
    return GetField<float>(VT_SRV_DIFF_HOST_RATE, 0.0f);
  }
  int32_t dst_host_count() const {
    return GetField<int32_t>(VT_DST_HOST_COUNT, 0);
  }
  int32_t dst_host_srv_count() const {
    return GetField<int32_t>(VT_DST_HOST_SRV_COUNT, 0);
  }
  float dst_host_same_srv_rate() const {
    return GetField<float>(VT_DST_HOST_SAME_SRV_RATE, 0.0f);
  }
  float dst_host_diff_srv_rate() const {
    return GetField<float>(VT_DST_HOST_DIFF_SRV_RATE, 0.0f);
  }
  float dst_host_same_src_port_rate() const {
    return GetField<float>(VT_DST_HOST_SAME_SRC_PORT_RATE, 0.0f);
  }
  float dst_host_srv_diff_host_rate() const {
    return GetField<float>(VT_DST_HOST_SRV_DIFF_HOST_RATE, 0.0f);
  }
  float dst_host_serror_rate() const {
    return GetField<float>(VT_DST_HOST_SERROR_RATE, 0.0f);
  }
  float dst_host_srv_serror_rate() const {
    return GetField<float>(VT_DST_HOST_SRV_SERROR_RATE, 0.0f);
  }
  float dst_host_rerror_rate() const {
    return GetField<float>(VT_DST_HOST_RERROR_RATE, 0.0f);
  }
  float dst_host_srv_rerror_rate() const {
    return GetField<float>(VT_DST_HOST_SRV_RERROR_RATE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DURATION) &&
           VerifyOffset(verifier, VT_PROTOCOL_TYPE) &&
           verifier.VerifyString(protocol_type()) &&
           VerifyOffset(verifier, VT_SERVICE) &&
           verifier.VerifyString(service()) &&
           VerifyOffset(verifier, VT_FLAG) &&
           verifier.VerifyString(flag()) &&
           VerifyField<int32_t>(verifier, VT_SRC_BYTES) &&
           VerifyField<int32_t>(verifier, VT_DST_BYTES) &&
           VerifyField<int32_t>(verifier, VT_LAND) &&
           VerifyField<int32_t>(verifier, VT_WRONG_FRAGMENT) &&
           VerifyField<int32_t>(verifier, VT_URGENT) &&
           VerifyField<int32_t>(verifier, VT_HOT) &&
           VerifyField<int32_t>(verifier, VT_NUM_FAILED_LOGINS) &&
           VerifyField<int32_t>(verifier, VT_LOGGED_IN) &&
           VerifyField<int32_t>(verifier, VT_NUM_COMPROMISED) &&
           VerifyField<int32_t>(verifier, VT_ROOT_SHELL) &&
           VerifyField<int32_t>(verifier, VT_SU_ATTEMPTED) &&
           VerifyField<int32_t>(verifier, VT_NUM_ROOT) &&
           VerifyField<int32_t>(verifier, VT_NUM_FILE_CREATIONS) &&
           VerifyField<int32_t>(verifier, VT_NUM_SHELLS) &&
           VerifyField<int32_t>(verifier, VT_NUM_ACCESS_FILES) &&
           VerifyField<int32_t>(verifier, VT_NUM_OUTBOUND_CMDS) &&
           VerifyField<int32_t>(verifier, VT_IS_HOST_LOGIN) &&
           VerifyField<int32_t>(verifier, VT_IS_GUEST_LOGIN) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyField<int32_t>(verifier, VT_SRV_COUNT) &&
           VerifyField<float>(verifier, VT_SERROR_RATE) &&
           VerifyField<float>(verifier, VT_SRV_SERROR_RATE) &&
           VerifyField<float>(verifier, VT_RERROR_RATE) &&
           VerifyField<float>(verifier, VT_SRV_RERROR_RATE) &&
           VerifyField<float>(verifier, VT_SAME_SRV_RATE) &&
           VerifyField<float>(verifier, VT_DIFF_SRV_RATE) &&
           VerifyField<float>(verifier, VT_SRV_DIFF_HOST_RATE) &&
           VerifyField<int32_t>(verifier, VT_DST_HOST_COUNT) &&
           VerifyField<int32_t>(verifier, VT_DST_HOST_SRV_COUNT) &&
           VerifyField<float>(verifier, VT_DST_HOST_SAME_SRV_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_DIFF_SRV_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_SAME_SRC_PORT_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_SRV_DIFF_HOST_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_SERROR_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_SRV_SERROR_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_RERROR_RATE) &&
           VerifyField<float>(verifier, VT_DST_HOST_SRV_RERROR_RATE) &&
           verifier.EndTable();
  }
};

struct PacketBuilder {
  typedef Packet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Packet::VT_DURATION, duration, 0);
  }
  void add_protocol_type(flatbuffers::Offset<flatbuffers::String> protocol_type) {
    fbb_.AddOffset(Packet::VT_PROTOCOL_TYPE, protocol_type);
  }
  void add_service(flatbuffers::Offset<flatbuffers::String> service) {
    fbb_.AddOffset(Packet::VT_SERVICE, service);
  }
  void add_flag(flatbuffers::Offset<flatbuffers::String> flag) {
    fbb_.AddOffset(Packet::VT_FLAG, flag);
  }
  void add_src_bytes(int32_t src_bytes) {
    fbb_.AddElement<int32_t>(Packet::VT_SRC_BYTES, src_bytes, 0);
  }
  void add_dst_bytes(int32_t dst_bytes) {
    fbb_.AddElement<int32_t>(Packet::VT_DST_BYTES, dst_bytes, 0);
  }
  void add_land(int32_t land) {
    fbb_.AddElement<int32_t>(Packet::VT_LAND, land, 0);
  }
  void add_wrong_fragment(int32_t wrong_fragment) {
    fbb_.AddElement<int32_t>(Packet::VT_WRONG_FRAGMENT, wrong_fragment, 0);
  }
  void add_urgent(int32_t urgent) {
    fbb_.AddElement<int32_t>(Packet::VT_URGENT, urgent, 0);
  }
  void add_hot(int32_t hot) {
    fbb_.AddElement<int32_t>(Packet::VT_HOT, hot, 0);
  }
  void add_num_failed_logins(int32_t num_failed_logins) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_FAILED_LOGINS, num_failed_logins, 0);
  }
  void add_logged_in(int32_t logged_in) {
    fbb_.AddElement<int32_t>(Packet::VT_LOGGED_IN, logged_in, 0);
  }
  void add_num_compromised(int32_t num_compromised) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_COMPROMISED, num_compromised, 0);
  }
  void add_root_shell(int32_t root_shell) {
    fbb_.AddElement<int32_t>(Packet::VT_ROOT_SHELL, root_shell, 0);
  }
  void add_su_attempted(int32_t su_attempted) {
    fbb_.AddElement<int32_t>(Packet::VT_SU_ATTEMPTED, su_attempted, 0);
  }
  void add_num_root(int32_t num_root) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_ROOT, num_root, 0);
  }
  void add_num_file_creations(int32_t num_file_creations) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_FILE_CREATIONS, num_file_creations, 0);
  }
  void add_num_shells(int32_t num_shells) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_SHELLS, num_shells, 0);
  }
  void add_num_access_files(int32_t num_access_files) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_ACCESS_FILES, num_access_files, 0);
  }
  void add_num_outbound_cmds(int32_t num_outbound_cmds) {
    fbb_.AddElement<int32_t>(Packet::VT_NUM_OUTBOUND_CMDS, num_outbound_cmds, 0);
  }
  void add_is_host_login(int32_t is_host_login) {
    fbb_.AddElement<int32_t>(Packet::VT_IS_HOST_LOGIN, is_host_login, 0);
  }
  void add_is_guest_login(int32_t is_guest_login) {
    fbb_.AddElement<int32_t>(Packet::VT_IS_GUEST_LOGIN, is_guest_login, 0);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(Packet::VT_COUNT, count, 0);
  }
  void add_srv_count(int32_t srv_count) {
    fbb_.AddElement<int32_t>(Packet::VT_SRV_COUNT, srv_count, 0);
  }
  void add_serror_rate(float serror_rate) {
    fbb_.AddElement<float>(Packet::VT_SERROR_RATE, serror_rate, 0.0f);
  }
  void add_srv_serror_rate(float srv_serror_rate) {
    fbb_.AddElement<float>(Packet::VT_SRV_SERROR_RATE, srv_serror_rate, 0.0f);
  }
  void add_rerror_rate(float rerror_rate) {
    fbb_.AddElement<float>(Packet::VT_RERROR_RATE, rerror_rate, 0.0f);
  }
  void add_srv_rerror_rate(float srv_rerror_rate) {
    fbb_.AddElement<float>(Packet::VT_SRV_RERROR_RATE, srv_rerror_rate, 0.0f);
  }
  void add_same_srv_rate(float same_srv_rate) {
    fbb_.AddElement<float>(Packet::VT_SAME_SRV_RATE, same_srv_rate, 0.0f);
  }
  void add_diff_srv_rate(float diff_srv_rate) {
    fbb_.AddElement<float>(Packet::VT_DIFF_SRV_RATE, diff_srv_rate, 0.0f);
  }
  void add_srv_diff_host_rate(float srv_diff_host_rate) {
    fbb_.AddElement<float>(Packet::VT_SRV_DIFF_HOST_RATE, srv_diff_host_rate, 0.0f);
  }
  void add_dst_host_count(int32_t dst_host_count) {
    fbb_.AddElement<int32_t>(Packet::VT_DST_HOST_COUNT, dst_host_count, 0);
  }
  void add_dst_host_srv_count(int32_t dst_host_srv_count) {
    fbb_.AddElement<int32_t>(Packet::VT_DST_HOST_SRV_COUNT, dst_host_srv_count, 0);
  }
  void add_dst_host_same_srv_rate(float dst_host_same_srv_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SAME_SRV_RATE, dst_host_same_srv_rate, 0.0f);
  }
  void add_dst_host_diff_srv_rate(float dst_host_diff_srv_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_DIFF_SRV_RATE, dst_host_diff_srv_rate, 0.0f);
  }
  void add_dst_host_same_src_port_rate(float dst_host_same_src_port_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SAME_SRC_PORT_RATE, dst_host_same_src_port_rate, 0.0f);
  }
  void add_dst_host_srv_diff_host_rate(float dst_host_srv_diff_host_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SRV_DIFF_HOST_RATE, dst_host_srv_diff_host_rate, 0.0f);
  }
  void add_dst_host_serror_rate(float dst_host_serror_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SERROR_RATE, dst_host_serror_rate, 0.0f);
  }
  void add_dst_host_srv_serror_rate(float dst_host_srv_serror_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SRV_SERROR_RATE, dst_host_srv_serror_rate, 0.0f);
  }
  void add_dst_host_rerror_rate(float dst_host_rerror_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_RERROR_RATE, dst_host_rerror_rate, 0.0f);
  }
  void add_dst_host_srv_rerror_rate(float dst_host_srv_rerror_rate) {
    fbb_.AddElement<float>(Packet::VT_DST_HOST_SRV_RERROR_RATE, dst_host_srv_rerror_rate, 0.0f);
  }
  explicit PacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Packet> CreatePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t duration = 0,
    flatbuffers::Offset<flatbuffers::String> protocol_type = 0,
    flatbuffers::Offset<flatbuffers::String> service = 0,
    flatbuffers::Offset<flatbuffers::String> flag = 0,
    int32_t src_bytes = 0,
    int32_t dst_bytes = 0,
    int32_t land = 0,
    int32_t wrong_fragment = 0,
    int32_t urgent = 0,
    int32_t hot = 0,
    int32_t num_failed_logins = 0,
    int32_t logged_in = 0,
    int32_t num_compromised = 0,
    int32_t root_shell = 0,
    int32_t su_attempted = 0,
    int32_t num_root = 0,
    int32_t num_file_creations = 0,
    int32_t num_shells = 0,
    int32_t num_access_files = 0,
    int32_t num_outbound_cmds = 0,
    int32_t is_host_login = 0,
    int32_t is_guest_login = 0,
    int32_t count = 0,
    int32_t srv_count = 0,
    float serror_rate = 0.0f,
    float srv_serror_rate = 0.0f,
    float rerror_rate = 0.0f,
    float srv_rerror_rate = 0.0f,
    float same_srv_rate = 0.0f,
    float diff_srv_rate = 0.0f,
    float srv_diff_host_rate = 0.0f,
    int32_t dst_host_count = 0,
    int32_t dst_host_srv_count = 0,
    float dst_host_same_srv_rate = 0.0f,
    float dst_host_diff_srv_rate = 0.0f,
    float dst_host_same_src_port_rate = 0.0f,
    float dst_host_srv_diff_host_rate = 0.0f,
    float dst_host_serror_rate = 0.0f,
    float dst_host_srv_serror_rate = 0.0f,
    float dst_host_rerror_rate = 0.0f,
    float dst_host_srv_rerror_rate = 0.0f) {
  PacketBuilder builder_(_fbb);
  builder_.add_dst_host_srv_rerror_rate(dst_host_srv_rerror_rate);
  builder_.add_dst_host_rerror_rate(dst_host_rerror_rate);
  builder_.add_dst_host_srv_serror_rate(dst_host_srv_serror_rate);
  builder_.add_dst_host_serror_rate(dst_host_serror_rate);
  builder_.add_dst_host_srv_diff_host_rate(dst_host_srv_diff_host_rate);
  builder_.add_dst_host_same_src_port_rate(dst_host_same_src_port_rate);
  builder_.add_dst_host_diff_srv_rate(dst_host_diff_srv_rate);
  builder_.add_dst_host_same_srv_rate(dst_host_same_srv_rate);
  builder_.add_dst_host_srv_count(dst_host_srv_count);
  builder_.add_dst_host_count(dst_host_count);
  builder_.add_srv_diff_host_rate(srv_diff_host_rate);
  builder_.add_diff_srv_rate(diff_srv_rate);
  builder_.add_same_srv_rate(same_srv_rate);
  builder_.add_srv_rerror_rate(srv_rerror_rate);
  builder_.add_rerror_rate(rerror_rate);
  builder_.add_srv_serror_rate(srv_serror_rate);
  builder_.add_serror_rate(serror_rate);
  builder_.add_srv_count(srv_count);
  builder_.add_count(count);
  builder_.add_is_guest_login(is_guest_login);
  builder_.add_is_host_login(is_host_login);
  builder_.add_num_outbound_cmds(num_outbound_cmds);
  builder_.add_num_access_files(num_access_files);
  builder_.add_num_shells(num_shells);
  builder_.add_num_file_creations(num_file_creations);
  builder_.add_num_root(num_root);
  builder_.add_su_attempted(su_attempted);
  builder_.add_root_shell(root_shell);
  builder_.add_num_compromised(num_compromised);
  builder_.add_logged_in(logged_in);
  builder_.add_num_failed_logins(num_failed_logins);
  builder_.add_hot(hot);
  builder_.add_urgent(urgent);
  builder_.add_wrong_fragment(wrong_fragment);
  builder_.add_land(land);
  builder_.add_dst_bytes(dst_bytes);
  builder_.add_src_bytes(src_bytes);
  builder_.add_flag(flag);
  builder_.add_service(service);
  builder_.add_protocol_type(protocol_type);
  builder_.add_duration(duration);
  return builder_.Finish();
}

inline flatbuffers::Offset<Packet> CreatePacketDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t duration = 0,
    const char *protocol_type = nullptr,
    const char *service = nullptr,
    const char *flag = nullptr,
    int32_t src_bytes = 0,
    int32_t dst_bytes = 0,
    int32_t land = 0,
    int32_t wrong_fragment = 0,
    int32_t urgent = 0,
    int32_t hot = 0,
    int32_t num_failed_logins = 0,
    int32_t logged_in = 0,
    int32_t num_compromised = 0,
    int32_t root_shell = 0,
    int32_t su_attempted = 0,
    int32_t num_root = 0,
    int32_t num_file_creations = 0,
    int32_t num_shells = 0,
    int32_t num_access_files = 0,
    int32_t num_outbound_cmds = 0,
    int32_t is_host_login = 0,
    int32_t is_guest_login = 0,
    int32_t count = 0,
    int32_t srv_count = 0,
    float serror_rate = 0.0f,
    float srv_serror_rate = 0.0f,
    float rerror_rate = 0.0f,
    float srv_rerror_rate = 0.0f,
    float same_srv_rate = 0.0f,
    float diff_srv_rate = 0.0f,
    float srv_diff_host_rate = 0.0f,
    int32_t dst_host_count = 0,
    int32_t dst_host_srv_count = 0,
    float dst_host_same_srv_rate = 0.0f,
    float dst_host_diff_srv_rate = 0.0f,
    float dst_host_same_src_port_rate = 0.0f,
    float dst_host_srv_diff_host_rate = 0.0f,
    float dst_host_serror_rate = 0.0f,
    float dst_host_srv_serror_rate = 0.0f,
    float dst_host_rerror_rate = 0.0f,
    float dst_host_srv_rerror_rate = 0.0f) {
  auto protocol_type__ = protocol_type ? _fbb.CreateString(protocol_type) : 0;
  auto service__ = service ? _fbb.CreateString(service) : 0;
  auto flag__ = flag ? _fbb.CreateString(flag) : 0;
  return machinelearning::CreatePacket(
      _fbb,
      duration,
      protocol_type__,
      service__,
      flag__,
      src_bytes,
      dst_bytes,
      land,
      wrong_fragment,
      urgent,
      hot,
      num_failed_logins,
      logged_in,
      num_compromised,
      root_shell,
      su_attempted,
      num_root,
      num_file_creations,
      num_shells,
      num_access_files,
      num_outbound_cmds,
      is_host_login,
      is_guest_login,
      count,
      srv_count,
      serror_rate,
      srv_serror_rate,
      rerror_rate,
      srv_rerror_rate,
      same_srv_rate,
      diff_srv_rate,
      srv_diff_host_rate,
      dst_host_count,
      dst_host_srv_count,
      dst_host_same_srv_rate,
      dst_host_diff_srv_rate,
      dst_host_same_src_port_rate,
      dst_host_srv_diff_host_rate,
      dst_host_serror_rate,
      dst_host_srv_serror_rate,
      dst_host_rerror_rate,
      dst_host_srv_rerror_rate);
}

inline const machinelearning::Packet *GetPacket(const void *buf) {
  return flatbuffers::GetRoot<machinelearning::Packet>(buf);
}

inline const machinelearning::Packet *GetSizePrefixedPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<machinelearning::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<machinelearning::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<machinelearning::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<machinelearning::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<machinelearning::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace machinelearning

#endif  // FLATBUFFERS_GENERATED_PACKETFULLFEATURES_MACHINELEARNING_H_
